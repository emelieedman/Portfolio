{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/emelie/Desktop/hyper-island-projects/react-storyblok-next-boilerplate/pages/[page].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n/* layout */\n\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n/* components */\n\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\n\nfunction fetchUrl(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n}\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\n\n\nvar SlugPage = function SlugPage(_ref) {\n  var data = _ref.data;\n  var content = data.content;\n  var headlineModuleData = content.body.find(function (item) {\n    return item.component === \"Headline\";\n  });\n  var collageData = content.body.find(function (item) {\n    return item.component === \"Collage\";\n  });\n  /* Now you need to map your own components, I just left the headline module as reference */\n\n  return __jsx(DefaultLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, (headlineModuleData ? __jsx(HeadlineModule, {\n    title: headlineModuleData.title,\n    subtitle: headlineModuleData.subtitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }) : null, collageData ? __jsx(Collage, {\n    title: collageData.title,\n    image1: collageData.image1,\n    image2: collageData.image2,\n    image3: collageData.image3,\n    image4: collageData.image4,\n    image5: collageData.image5,\n    image6: collageData.image6,\n    image7: collageData.image7,\n    image8: collageData.image8,\n    image9: collageData.image9,\n    image10: collageData.image10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }) : null));\n};\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\n\n\nSlugPage.getInitialProps = function _callee(_ref2) {\n  var query, page, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref2.query;\n\n          /* {query} is an object we receive within this method from Next,\n          so that we can retrieve the slug (e.g. '/welcome') coming with the route */\n          page = query.page;\n          /* Calling our internal api endpoint so that we can fetch Storyblok content\n          server-side (we are on client-side here) */\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetchUrl(\"http://localhost:3000/api/page/\".concat(page)));\n\n        case 4:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default SlugPage;","map":{"version":3,"sources":["/Users/emelie/Desktop/hyper-island-projects/react-storyblok-next-boilerplate/pages/[page].js"],"names":["fetch","DefaultLayout","HeadlineModule","ParagraphModule","fetchUrl","url","then","r","json","SlugPage","data","content","headlineModuleData","body","find","item","component","collageData","title","subtitle","image1","image2","image3","image4","image5","image6","image7","image8","image9","image10","getInitialProps","query","page"],"mappings":";;;;;AAAA;;AAEA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA;;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAEA;;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AAEA;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAOL,KAAK,CAACK,GAAD,CAAL,CAAWC,IAAX,CAAgB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,GAAjB,CAAP;AACD;AAED;;;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAAA,MACrBC,OADqB,GACTD,IADS,CACrBC,OADqB;AAE7B,MAAMC,kBAAkB,GAAGD,OAAO,CAACE,IAAR,CAAaC,IAAb,CAAkB,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,SAAL,KAAmB,UAA7B;AAAA,GAAlB,CAA3B;AACA,MAAMC,WAAW,GAAGN,OAAO,CAACE,IAAR,CAAaC,IAAb,CAAkB,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,SAAL,KAAmB,SAA7B;AAAA,GAAlB,CAApB;AACA;;AACA,SACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGJ,kBAAkB,GAAG,MAAC,cAAD;AAAgB,IAAA,KAAK,EAAEA,kBAAkB,CAACM,KAA1C;AAAiD,IAAA,QAAQ,EAAEN,kBAAkB,CAACO,QAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAgG,IAAlH,EACDF,WAAW,GAAG,MAAC,OAAD;AAAS,IAAA,KAAK,EAAEA,WAAW,CAACC,KAA5B;AAAmC,IAAA,MAAM,EAAED,WAAW,CAACG,MAAvD;AAA+D,IAAA,MAAM,EAAEH,WAAW,CAACI,MAAnF;AAA2F,IAAA,MAAM,EAAEJ,WAAW,CAACK,MAA/G;AAAuH,IAAA,MAAM,EAAEL,WAAW,CAACM,MAA3I;AAAmJ,IAAA,MAAM,EAAEN,WAAW,CAACO,MAAvK;AAA+K,IAAA,MAAM,EAAEP,WAAW,CAACQ,MAAnM;AAA2M,IAAA,MAAM,EAAER,WAAW,CAACS,MAA/N;AAAuO,IAAA,MAAM,EAAET,WAAW,CAACU,MAA3P;AAAmQ,IAAA,MAAM,EAAEV,WAAW,CAACW,MAAvR;AAA+R,IAAA,OAAO,EAAEX,WAAW,CAACY,OAApT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAqU,IAFlV,EADF;AAMD,CAXD;AAaA;;;;AAEApB,QAAQ,CAACqB,eAAT,GAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,KAAT,SAASA,KAAT;;AACzB;;AAEQC,UAAAA,IAHiB,GAGRD,KAHQ,CAGjBC,IAHiB;AAIzB;;;AAJyB;AAAA,2CAMN5B,QAAQ,0CAAmC4B,IAAnC,EANF;;AAAA;AAMnBtB,UAAAA,IANmB;AAAA,2CAQlB;AAAEA,YAAAA,IAAI,EAAJA;AAAF,WARkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAWA,eAAeD,QAAf","sourcesContent":["/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n\n/* layout */\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n\n/* components */\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\n\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json());\n}\n\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\nconst SlugPage = ({ data }) => {\n  const { content } = data;\n  const headlineModuleData = content.body.find((item) => item.component === \"Headline\");\n  const collageData = content.body.find((item) => item.component === \"Collage\");\n  /* Now you need to map your own components, I just left the headline module as reference */\n  return (\n    <DefaultLayout>\n      {headlineModuleData ? <HeadlineModule title={headlineModuleData.title} subtitle={headlineModuleData.subtitle} /> : null,\n      collageData ? <Collage title={collageData.title} image1={collageData.image1} image2={collageData.image2} image3={collageData.image3} image4={collageData.image4} image5={collageData.image5} image6={collageData.image6} image7={collageData.image7} image8={collageData.image8} image9={collageData.image9} image10={collageData.image10} /> : null }\n    </DefaultLayout>\n  );\n};\n\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\nSlugPage.getInitialProps = async ({ query }) => {\n  /* {query} is an object we receive within this method from Next,\n\tso that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const { page } = query;\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\n\tserver-side (we are on client-side here) */\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`);\n  /* Returning the data back into SlugPage as props */\n  return { data }; /* This is the same as { data: data } */\n};\n\nexport default SlugPage;\n"]},"metadata":{},"sourceType":"module"}